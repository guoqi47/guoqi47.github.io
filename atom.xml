<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>guoqi</title>
  
  <subtitle>菜鸡一只</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-10T06:34:26.314Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>guoqi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NLP入门</title>
    <link href="http://yoursite.com/2018/08/25/NLP%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/08/25/NLP入门/</id>
    <published>2018-08-25T03:36:04.000Z</published>
    <updated>2018-09-10T06:34:26.314Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚进这个组，就被告知要做一个NLP的项目。简单说就是根据司机交谈的语音内容，转文本，然后再进行分析。<br>可是博主之前没玩过这个啊，就有点尴尬，所以简单记下入门的路线，感觉不错，也方便后来者<a id="more"></a><br>先看了一个别人博客上的一个<a href="https://blog.csdn.net/Irving_zhang/article/details/69396923" target="_blank" rel="noopener">开源的小项目</a>，我看的一个是用CNN做的，里面的链接又有<br>关于CNN用于NLP的一些特殊情况，比如filter的宽度和向量的宽度相等啊等等。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚进这个组，就被告知要做一个NLP的项目。简单说就是根据司机交谈的语音内容，转文本，然后再进行分析。&lt;br&gt;可是博主之前没玩过这个啊，就有点尴尬，所以简单记下入门的路线，感觉不错，也方便后来者
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>滴滴ai lab实习面试</title>
    <link href="http://yoursite.com/2018/08/23/%E6%BB%B4%E6%BB%B4ai-lab%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/"/>
    <id>http://yoursite.com/2018/08/23/滴滴ai-lab实习面试/</id>
    <published>2018-08-22T23:10:02.000Z</published>
    <updated>2018-08-25T03:37:01.673Z</updated>
    
    <content type="html"><![CDATA[<p>好久没更新之前要写的排序算法的感悟了,原因是这几天在准备面试.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久没更新之前要写的排序算法的感悟了,原因是这几天在准备面试.&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>排序算法的一点感悟(1)</title>
    <link href="http://yoursite.com/2018/07/31/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%80%E7%82%B9%E6%84%9F%E6%82%9F-1/"/>
    <id>http://yoursite.com/2018/07/31/排序算法的一点感悟-1/</id>
    <published>2018-07-31T08:04:02.000Z</published>
    <updated>2018-08-22T23:38:00.133Z</updated>
    
    <content type="html"><![CDATA[<p>//  本科阶段浑浑噩噩跟着老师学完排序后,到了研究生阶段发现并没有理解其中的奥妙和各种算法之间的关系,遂再次进行探究,并写一点自己的见解.<br>废话不多说,本篇博文先介绍一些非核心的辅助函数和最简单的选择排序算法.(完整代码已上传至github,<a href="https://github.com/guoqi47/Leetcode/blob/master/Algorithm/Soring.java" target="_blank" rel="noopener">https://github.com/guoqi47/Leetcode/blob/master/Algorithm/Soring.java</a>)<br>由于在实际应用中我们要对多种数据类型进行排序,所以我们的算法需要对实现Comparable接口的任意数据类型进行排序,实际上Java中Integer,Double,String和File,URL等类型均已实现的Comparable接口.如果我们需要对自己写的类型进行排序,实现Comparable接口后,直接丢到我们的排序算法就ok啦~<a id="more"></a><br>这么管用的Comparable接口咋实现呢,很简单,实现compareTo方法就行,一般是返回-1,0,1<br>下面介绍最最基础的选择排序算法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = a.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> min = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;N; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(less(a[j],a[min])) min = j;</span><br><span class="line">&#125;</span><br><span class="line">exch(a,i,min);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>是不是感觉和冒泡排序有点像,那么选择排序和冒泡排序的区别是什么呢?<br>提示一下,冒泡排序（BubbleSort）的基本概念是：依次比较相邻的两个数，将小数放在前面，大数放在后面。<br>即在第一趟：首先比较第1个和第2个数，将小数放前，大数放后。然后比较第2个数和第3个数，将小数放前，大数放后，如此继续，直至比较最后两个数，将小数放前，大数放后。至此第一趟结束，将最大的数放到了最后。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;//  本科阶段浑浑噩噩跟着老师学完排序后,到了研究生阶段发现并没有理解其中的奥妙和各种算法之间的关系,遂再次进行探究,并写一点自己的见解.&lt;br&gt;废话不多说,本篇博文先介绍一些非核心的辅助函数和最简单的选择排序算法.(完整代码已上传至github,&lt;a href=&quot;https://github.com/guoqi47/Leetcode/blob/master/Algorithm/Soring.java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/guoqi47/Leetcode/blob/master/Algorithm/Soring.java&lt;/a&gt;)&lt;br&gt;由于在实际应用中我们要对多种数据类型进行排序,所以我们的算法需要对实现Comparable接口的任意数据类型进行排序,实际上Java中Integer,Double,String和File,URL等类型均已实现的Comparable接口.如果我们需要对自己写的类型进行排序,实现Comparable接口后,直接丢到我们的排序算法就ok啦~
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/27/hello-world/"/>
    <id>http://yoursite.com/2018/07/27/hello-world/</id>
    <published>2018-07-27T08:56:59.125Z</published>
    <updated>2018-07-27T08:56:59.125Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
